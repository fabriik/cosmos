version: 2.1

orbs: 
  slack: circleci/slack@4.8.3

workflows:
  buildapp:
    jobs:
      - build-fabriik:
          filters:
            branches:
              only: gvh/ci 

jobs:
  build-fabriik:
    macos:
      xcode: 13.2.1 # Specify the Xcode version to use

    steps:
      - checkout

        # next four run commands to work around xcodebuild bug using private repos for swift pacakages
      - run:
          name: Use Default SCM (Work Around xCode bug)
          command : |
            sudo defaults write com.apple.dt.Xcode IDEPackageSupportUseBuiltinSCM YES

      - run:
          name: Renove ssh Key (Work Around xCode bug)
          command : |
            rm ~/.ssh/id_rsa || true

      - run:
          name: Set Known Host IPs for bitbucket (Work Around xCode bug)
          command : |
            for ip in $(dig @8.8.8.8 bitbucket.org +short); do ssh-keyscan bitbucket.org,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts || true

      - run:
          name: Set Known Host IPs for github (Work Around xCode bug)
          command : |
            for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts || true

      - run:
          name: Pull Submodules
          command: |
            git submodule update --init --recursive

      - run:
          name: Check Init
          command: |
            swift --version
            cat /etc/shells
            ls -la

      - restore_cache:
          keys:
            - v1-dependencies

      - save_cache:
          paths:
            - ~/Library/Caches/Homebrew

          key: v1-dependencies

      - run:
          name: Check Key
          command: |
            mkdir -p ~/cert

            echo $IOS_DISTRIBUTION_CERT > ~/cert/base64cert
            base64 -d  ~/cert/base64cert > ~/cert/ios_distribution.cer

            echo $IOS_DISTRIBUTION_P12 > ~/cert/base64p12
            base64 -d  ~/cert/base64p12 > ~/cert/ios_distribution.p12
            ls -la ~/cert

      - run:
          name: Install Key
          command: |
            security create-keychain -p test  ~/Library/Keychains/default.keychain
            security unlock-keychain -p test ~/Library/Keychains/default.keychain
            security set-keychain-settings -t 9999 -l ~/Library/Keychains/default.keychain

            security -v import .circleci/cert/apple.cer                                         -k ~/Library/Keychains/default.keychain -T /usr/bin/codesign
            security -v import ~/cert/ios_distribution.cer                                 -k ~/Library/Keychains/default.keychain -T /usr/bin/codesign
            security -v import  ~/cert/ios_distribution.p12  -t agg -P $IOS_DISTRIBUTION_P12_PASS -k ~/Library/Keychains/default.keychain -T /usr/bin/codesign
            security find-certificate -a  ~/Library/Keychains/default.keychain

            security default-keychain -s ~/Library/Keychains/default.keychain

      - run:
          name: Install Prerequisites
          command: |
            sudo gem install xcpretty
            brew --cache
            brew install ghostscript SwiftLint

      - run:
          name: Check Key
          command: |
             security list-keychains -d user -s ~/Library/Keychains/default.keychain

      - run:
          name: Provisioning Profile
          command: |
            cd brd-ios
            sed "s/PRODUCT_BUNDLE_IDENTIFIER = com.fabriik.one;/PRODUCT_BUNDLE_IDENTIFIER = com.fabriik.one;\                PROVISIONING_PROFILE_SPECIFIER = wallet-CNI-distribution2;\                CODE_SIGN_IDENTITY = \"iPhone Distribution\";\                CODE_SIGN_STYLE = Manual;/g"  breadwallet.xcodeproj/project.pbxproj  > breadwallet.xcodeproj/project.pbxproj.rnm
            cp breadwallet.xcodeproj/project.pbxproj.rnm breadwallet.xcodeproj/project.pbxproj
            mkdir test_output
            cp breadwallet.xcodeproj/project.pbxproj.rnm test_output
            cd ..
            uuid=`grep UUID -A1 -a .circleci/mobileprovision/wallet-CNI-distribution2.mobileprovision | grep -io "[-A-F0-9]\{36\}"`
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp .circleci/mobileprovision/wallet-CNI-distribution2.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$uuid.mobileprovision
            ls -la ~/Library/MobileDevice/Provisioning\ Profiles

            git status

      - run:
          name: Help and Project List
          command: |
            cd brd-ios
            xcodebuild --help
            xcodebuild -project breadwallet.xcodeproj -list

      - run:
          name: Build Clean
          command: |
            cd brd-ios
            xcodebuild clean -workspace breadwallet.xcworkspace -scheme breadwallet | xcpretty

      - run:
          name: Build Submodules
          command: |
            cd brd-ios
            security default-keychain
            security set-keychain-settings -lut 9999
            security unlock-keychain -p test ~/Library/Keychains/default.keychain
            scripts/build_sub_modules.sh

      - run:
          name: Run Build
          command: |
            security default-keychain
            security set-keychain-settings -lut 9999
            security unlock-keychain -p test ~/Library/Keychains/default.keychain
            git config --global user.name "circleci"
            git config --global user.email circleci@just.cash
            git add --all *
            git commit -m "circleci build"
            mkdir brd-ios/build
            cp .circleci/config/exportOptions.plist brd-ios/build
            cd brd-ios
            ./scripts/makebuild.sh 4.3.${CIRCLE_BUILD_NUM} ${CIRCLE_BUILD_NUM} ci
            ./scripts/uploadbuild.sh ${CIRCLE_BRANCH}

      - run:
          name: Build using xCode Config (disabled)
          command: |
            security default-keychain
            security set-keychain-settings -lut 9999
            security unlock-keychain -p test ~/Library/Keychains/default.keychain
            cd brd-ios
            echo xcodebuild  build  -verbose   -workspace breadwallet.xcworkspace   -scheme breadwallet | xcpretty

      - run:
          name: after build check
          command: |
            ls -la build
            ls -la .

      # Collect XML test results data to show in the UI, and save the same XML
      # files under test-results folder in the Artifacts tab
      - store_test_results:
          path: brd-ios/test_output
      - store_artifacts:
          path: brd-ios/test_output
          destination: scan-output
