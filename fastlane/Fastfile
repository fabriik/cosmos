# More documentation about how to customize your build
# can be found here:
# https://docs.fastlane.tools
fastlane_version "2.68.0"
fastlane_require 'json'
fastlane_require 'uri'

default_platform :android

# Make a build an publish it to Crashlytics for each flavors.
#
# Optional params:
# [output_path:"~/some/path/"] Path to a specific location where you want to get a copy of the the
# generated apks.
lane :betaAll do |options|
  beta(flavor: 'brdTestnet', build_type: 'debug', output_path: options[:output_path])
  beta(flavor: 'brdTestnet', build_type: 'release', output_path: options[:output_path])
  beta(flavor: 'brd', build_type: 'debug', output_path: options[:output_path])
  beta(flavor: 'brd', build_type: 'release', output_path: options[:output_path])
end

# Make a build and publish it to Crashlytics and/or to a local folder.
#
# Required params: it requires the flavor:[brd/brdTestnet] to be built and the release
# flavor:[brd/brdTestnet]
# mode:"[debug/release]" 
# Optional params:
# [output_path:"~/some/path/"] Path to a specific location where you want to get a copy of the apk.
# [upload:true/false] Flag indicating if the build should be uploaded to Crashlytics, True as default.
# fastlane beta flavor:"brdTestnet" build_type:"debug" [output_path:"~/Desktop/3.8.1.1/"] [upload:false]
lane :beta do |options|
  # Generate a changelog from commit messages since the last tag
  changelog_from_git_commits(
    merge_commit_filtering: "exclude_merges"
  )
  # build the release variant
  gradle(
    task: 'assemble',
    flavor: options[:flavor],
    build_type: options[:build_type],
    properties: {
      "android.injected.signing.store.file" => ENV['SIGNING_KEY'],
      "android.injected.signing.store.password" => ENV['SIGNING_PASSWORD'],
      "android.injected.signing.key.alias" => ENV['SIGNING_ALIAS'],
      "android.injected.signing.key.password" => ENV['SIGNING_ALIAS_PASSWORD']
    }
  )
  # upload to Beta by Crashlytics
  if !options.key?(:upload) or options[:upload]
    crashlytics(
      notes: lane_context[SharedValues::FL_CHANGELOG],
      groups: ["android-team", "support"]
    )
  end
  if options[:output_path]
    apk_location = "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}"
    sh("mkdir -pv #{options[:output_path]}")
    sh("mv -fv #{apk_location} #{options[:output_path]}")
  end
end

lane :appetizeUpload do |options|
  flavor = options[:flavor] || 'brdTestnet'
  build_type = options[:build_type] || 'debug'
  apks = Dir["../app/build/outputs/apk/#{flavor}/#{build_type}/**.apk"]
  path = ""
  if apks.size > 1
    UI.user_error!("Before uploading, run `./gradlew clean assemble` (found #{apks.size} apks, expecting 1)")
    return
  elsif apks.size == 1
    path = File.expand_path(apks.first())
  elsif apks.size == 0
    gradle(
      task: 'assemble',
      flavor: flavor,
      build_type: build_type,
      flags: options[:flags],
      properties: {
        "android.injected.signing.store.file" => ENV['SIGNING_KEY'],
        "android.injected.signing.store.password" => ENV['SIGNING_PASSWORD'],
        "android.injected.signing.key.alias" => ENV['SIGNING_ALIAS'],
        "android.injected.signing.key.password" => ENV['SIGNING_ALIAS_PASSWORD']
      }
    )
    path = "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}"
  end
  appetize(
    path: path,
    api_token: ENV['APPETIZE_TOKEN'],
    platform: 'android'
  )

  rawBody = {
     appetizeKey: lane_context[SharedValues::APPETIZE_PUBLIC_KEY],
     buildFlavor: flavor,
     buildType: build_type
  }
  if ENV['CI']
    rawBody['author'] = ENV['GITLAB_USER_NAME']
    if ENV['CI_MERGE_REQUEST_SOURCE_BRANCH_NAME']
      rawBody['type'] = 'merge'
      rawBody['name'] = ENV['CI_MERGE_REQUEST_SOURCE_BRANCH_NAME']
    elsif ENV['CI_COMMIT_TAG'] then
      rawBody['type'] = 'tag'
      rawBody['name'] = ENV['CI_COMMIT_TAG']
    end
  else
    branch = sh("git branch --show-current").strip!
    user = sh("git config user.name").strip!
    rawBody['name'] = "dev-#{URI.escape(user) || branch}"
    rawBody['author'] = user
    rawBody['type'] = 'dev'
  end
  body = JSON.generate(rawBody)
  sh("curl -XPOST -H \"Content-type: application/json\" -d '#{body}' '#{ENV['APPETIZE_CALLBACK']}'")
end

lane :appetizeRemove do |options|
  if options[:merge]
    params = "?name=#{options[:merge]}&type=merge"
  elsif options[:tag]
    params = "?name=#{options[:tag]}&type=tag"
  else
    branch = sh("git branch --show-current").strip!
    user = sh("git config user.name").strip!
    name = "dev-#{URI.escape(user) || branch}"
    params = "?name=#{name}&type=dev"
  end
  flavor = options[:flavor] || 'brdTestnet'
  build_type = options[:build_type] || 'debug'
  params += "&flavor=#{flavor}&buildType=#{build_type}"
  sh("curl -XDELETE '#{ENV['APPETIZE_CALLBACK']}#{params}'")
end
