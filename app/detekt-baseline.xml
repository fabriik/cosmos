<?xml version="1.0" ?>
<SmellBaseline>
  <Blacklist></Blacklist>
  <Whitelist>
    <ID>ChainWrapping:</ID>
    <ID>CommentSpacing:</ID>
    <ID>ComplexCondition:NotificationSettingsViewModel.kt$NotificationSettingsViewModel$(state == NotificationsState.APP_ENABLED &amp;&amp; !enable) || (state == NotificationsState.APP_DISABLED &amp;&amp; enable)</ID>
    <ID>ComplexMethod:CurrencyHistoricalDataClient.kt$CurrencyHistoricalDataClient$private fun fetchHistoricalData( context: Context, fromCurrency: String, toCurrency: String, history: History, limit: Limit ): List&lt;PriceDataPoint&gt;</ID>
    <ID>ComplexMethod:NewPriceAlertViewModel.kt$NewPriceAlertViewModel$fun saveAlert()</ID>
    <ID>ComplexMethod:PriceAlertAdapter.kt$PriceAlertAdapter$private fun PriceAlert.asLabelString(): String</ID>
    <ID>ComplexMethod:PriceAlertWorker.kt$PriceAlertWorker$override fun doWork(): Result</ID>
    <ID>ComplexMethod:RecoveryKeyHandler.kt$RecoveryKeyHandler$// TODO: This method serves as a collection point for all // of the necessary steps in creating a wallet from a phrase. // After all operations have been collected and reviewed, // this function can be broken down into smaller pieces. private fun recoverWallet(effect: F.RecoverWallet)</ID>
    <ID>ComplexMethod:SignedRequestMiddleware.kt$SignedRequestMiddleware$override fun handle(target: String, baseRequest: Request, request: HttpServletRequest, response: HttpServletResponse): Boolean</ID>
    <ID>ComplexMethod:WalletUpdate.kt$ private fun List&lt;WalletTransaction&gt;.filtered( filterQuery: String, filterSent: Boolean, filterReceived: Boolean, filterComplete: Boolean, filterPending: Boolean )</ID>
    <ID>EmptyClassBlock:WalletController.kt$WalletController$Companion</ID>
    <ID>EmptyFunctionBlock:DefaultTextWatcher.kt$DefaultTextWatcher${ }</ID>
    <ID>EmptyFunctionBlock:HomeScreenHandler.kt$HomeScreenHandler.&lt;no name provided&gt;${ }</ID>
    <ID>FinalNewline:</ID>
    <ID>LongMethod:NewPriceAlertActivity.kt$NewPriceAlertActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:PriceAlertWorker.kt$PriceAlertWorker$override fun doWork(): Result</ID>
    <ID>MagicNumber:BRSharedPrefs.kt$BRSharedPrefs$15</ID>
    <ID>MagicNumber:CoreBreadBox.kt$CoreBreadBox$100</ID>
    <ID>MagicNumber:CurrencyHistoricalDataClient.kt$CurrencyHistoricalDataClient$1000</ID>
    <ID>MagicNumber:CurrencyHistoricalDataClient.kt$CurrencyHistoricalDataClient.Limit.PAST_3_MONTHS$90</ID>
    <ID>MagicNumber:CurrencyHistoricalDataClient.kt$CurrencyHistoricalDataClient.Limit.PAST_3_YEARS$1095</ID>
    <ID>MagicNumber:CurrencyHistoricalDataClient.kt$CurrencyHistoricalDataClient.Limit.PAST_3_YEARS$5</ID>
    <ID>MagicNumber:CurrencyHistoricalDataClient.kt$CurrencyHistoricalDataClient.Limit.PAST_DAY$1440</ID>
    <ID>MagicNumber:CurrencyHistoricalDataClient.kt$CurrencyHistoricalDataClient.Limit.PAST_DAY$8</ID>
    <ID>MagicNumber:CurrencyHistoricalDataClient.kt$CurrencyHistoricalDataClient.Limit.PAST_MONTH$30</ID>
    <ID>MagicNumber:CurrencyHistoricalDataClient.kt$CurrencyHistoricalDataClient.Limit.PAST_WEEK$168</ID>
    <ID>MagicNumber:CurrencyHistoricalDataClient.kt$CurrencyHistoricalDataClient.Limit.PAST_YEAR$365</ID>
    <ID>MagicNumber:OnBoardingUpdate.kt$OnBoardingUpdate$3</ID>
    <ID>MagicNumber:PriceAlert.kt$PriceAlert$100</ID>
    <ID>MagicNumber:PriceAlertRepository.kt$3</ID>
    <ID>MagicNumber:PriceAlertRepository.kt$4</ID>
    <ID>MagicNumber:PriceAlertRepository.kt$5</ID>
    <ID>MagicNumber:PriceAlertRepository.kt$6</ID>
    <ID>MagicNumber:PriceAlertRepository.kt$7</ID>
    <ID>MagicNumber:PriceAlertWorker.kt$PriceAlertWorker$100f</ID>
    <ID>MagicNumber:RecoveryKey.kt$RecoveryKey.E.OnFocusedWordChanged$11</ID>
    <ID>MagicNumber:RecoveryKey.kt$RecoveryKey.E.OnWordChanged$11</ID>
    <ID>MagicNumber:RecoveryKey.kt$RecoveryKey.E.OnWordValidated$11</ID>
    <ID>MagicNumber:RecoveryKey.kt$RecoveryKey.F.RecoverWallet$12</ID>
    <ID>MagicNumber:RecoveryKey.kt$RecoveryKey.F.ResetPin$12</ID>
    <ID>MagicNumber:RecoveryKey.kt$RecoveryKey.F.Unlink$12</ID>
    <ID>MagicNumber:RecoveryKey.kt$RecoveryKey.F.ValidatePhrase$12</ID>
    <ID>MagicNumber:RecoveryKey.kt$RecoveryKey.M$11</ID>
    <ID>MagicNumber:RecoveryKeyUpdate.kt$RecoveryKeyUpdate$12</ID>
    <ID>MagicNumber:SignedRequestMiddleware.kt$SignedRequestMiddleware$8000</ID>
    <ID>MatchingDeclarationName:CoreUtils.kt$com.breadwallet.breadbox.CoreUtils.kt</ID>
    <ID>MaxLineLength:AppReviewPromptManager.kt$AppReviewPromptManager$(System.currentTimeMillis() - it.timeStamp * DateUtils.SECOND_IN_MILLIS) &lt; DateUtils.DAY_IN_MILLIS</ID>
    <ID>MaxLineLength:BRDFirebaseMessagingService.kt$BRDFirebaseMessagingService$BRExecutor.getInstance().forLightWeightBackgroundTasks().execute { NotificationsSettingsClientImpl.registerToken(context, token) }</ID>
    <ID>MaxLineLength:BRDFirebaseMessagingService.kt$BRDFirebaseMessagingService$val notificationChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID, getString(R.string.PushNotifications_title), NotificationManager.IMPORTANCE_DEFAULT)</ID>
    <ID>MaxLineLength:BRDFirebaseMessagingService.kt$BRDFirebaseMessagingService.Companion$BRExecutor.getInstance().forLightWeightBackgroundTasks().execute { NotificationsSettingsClientImpl.registerToken(context, firebaseToken) }</ID>
    <ID>MaxLineLength:NewPriceAlertViewModel.kt$NewPriceAlertViewModel$WINDOW_DAY_WEEK -&gt; percentageChangedInDayAndWeek(selectedCrypto, value, toCurrency, Date().time, exchangeRate)</ID>
    <ID>MaxLineLength:NewPriceAlertViewModel.kt$NewPriceAlertViewModel$WINDOW_DAY_WEEK -&gt; percentageDecreasedInDayAndWeek(selectedCrypto, value, toCurrency, Date().time, exchangeRate)</ID>
    <ID>MaxLineLength:NewPriceAlertViewModel.kt$NewPriceAlertViewModel$WINDOW_DAY_WEEK -&gt; percentageIncreasedInDayAndWeek(selectedCrypto, value, toCurrency, Date().time, exchangeRate)</ID>
    <ID>MaxLineLength:PriceAlert.kt$PriceAlert.Companion$PriceAlert(Type.PERCENTAGE_CHANGE, direction, forCurrencyCode, value, currencyCode, pinnedPrice = pinnedPrice)</ID>
    <ID>MaxLineLength:PriceAlert.kt$PriceAlert.Companion$PriceAlert(Type.PERCENTAGE_CHANGE_DAY, Direction.BOTH, forCurrencyCode, value, currencyCode, startTime, pinnedPrice)</ID>
    <ID>MaxLineLength:PriceAlert.kt$PriceAlert.Companion$PriceAlert(Type.PERCENTAGE_CHANGE_DAY, Direction.DECREASE, forCurrencyCode, value, currencyCode, startTime, pinnedPrice)</ID>
    <ID>MaxLineLength:PriceAlert.kt$PriceAlert.Companion$PriceAlert(Type.PERCENTAGE_CHANGE_DAY, Direction.INCREASE, forCurrencyCode, value, currencyCode, startTime, pinnedPrice)</ID>
    <ID>MaxLineLength:PriceAlert.kt$PriceAlert.Companion$PriceAlert(Type.PERCENTAGE_CHANGE_DAY_WEEK, Direction.BOTH, forCurrencyCode, value, currencyCode, startTime, pinnedPrice)</ID>
    <ID>MaxLineLength:PriceAlert.kt$PriceAlert.Companion$PriceAlert(Type.PERCENTAGE_CHANGE_DAY_WEEK, Direction.DECREASE, forCurrencyCode, value, currencyCode, startTime, pinnedPrice)</ID>
    <ID>MaxLineLength:PriceAlert.kt$PriceAlert.Companion$PriceAlert(Type.PERCENTAGE_CHANGE_DAY_WEEK, Direction.INCREASE, forCurrencyCode, value, currencyCode, startTime, pinnedPrice)</ID>
    <ID>MaximumLineLength:</ID>
    <ID>MultiLineIfElse:</ID>
    <ID>NestedBlockDepth:CurrencyHistoricalDataClient.kt$CurrencyHistoricalDataClient$private fun fetchHistoricalData( context: Context, fromCurrency: String, toCurrency: String, history: History, limit: Limit ): List&lt;PriceDataPoint&gt;</ID>
    <ID>NestedBlockDepth:WebController.kt$WebController$override fun onActivityResult(requestCode: Int, resultCode: Int, intent: Intent?)</ID>
    <ID>NoBlankLineBeforeRbrace:</ID>
    <ID>NoConsecutiveBlankLines:</ID>
    <ID>NoEmptyClassBody:</ID>
    <ID>NoMultipleSpaces:</ID>
    <ID>NoTrailingSpaces:</ID>
    <ID>NoUnusedImports:</ID>
    <ID>NoWildcardImports:</ID>
    <ID>ParameterListWrapping:</ID>
    <ID>ReturnCount:CurrencyHistoricalDataClient.kt$CurrencyHistoricalDataClient$private fun fetchHistoricalData( context: Context, fromCurrency: String, toCurrency: String, history: History, limit: Limit ): List&lt;PriceDataPoint&gt;</ID>
    <ID>ReturnCount:ExperimentsClient.kt$ExperimentsClientImpl$override fun getExperiments(context: Context): List&lt;Experiment&gt;</ID>
    <ID>ReturnCount:InAppMessagesClient.kt$InAppMessagesClient$ fun fetchMessages(context: Context, type: InAppMessage.Type? = null): List&lt;InAppMessage&gt;</ID>
    <ID>ReturnCount:NewPriceAlertViewModel.kt$NewPriceAlertViewModel$fun saveAlert()</ID>
    <ID>ReturnCount:OnBoardingHandler.kt$OnBoardingHandler$private suspend fun createWallet()</ID>
    <ID>ReturnCount:RecoveryKeyHandler.kt$RecoveryKeyHandler$// TODO: This method serves as a collection point for all // of the necessary steps in creating a wallet from a phrase. // After all operations have been collected and reviewed, // this function can be broken down into smaller pieces. private fun recoverWallet(effect: F.RecoverWallet)</ID>
    <ID>ReturnCount:ScrubGestureDetector.kt$ScrubGestureDetector$override fun onTouch(v: View, event: MotionEvent): Boolean</ID>
    <ID>ReturnCount:SignedRequestMiddleware.kt$SignedRequestMiddleware$override fun handle( target: String, baseRequest: Request, request: HttpServletRequest, response: HttpServletResponse ): Boolean</ID>
    <ID>ReturnCount:SparkView.kt$SparkView.Companion$ internal fun getNearestIndex(points: List&lt;Float&gt;, x: Float): Int</ID>
    <ID>ReturnCount:WalletJs.kt$WalletJs$private suspend fun estimateFee( wallet: Wallet, address: Address?, amount: Amount ): TransferFeeBasis?</ID>
    <ID>SpacingAroundColon:</ID>
    <ID>SpacingAroundCurly:</ID>
    <ID>SpacingAroundParens:</ID>
    <ID>SpreadOperator:Logger.kt$(message, *data)</ID>
    <ID>SpreadOperator:Logger.kt$Logger.Companion$(message, *data)</ID>
    <ID>TooGenericExceptionCaught:BRSharedPrefs.kt$BRSharedPrefs$e: Exception</ID>
    <ID>TooGenericExceptionCaught:NativePromiseFactory.kt$NativePromiseFactory.NativePromiseJs$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OnBoardingHandler.kt$OnBoardingHandler$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RecoveryKeyHandler.kt$RecoveryKeyHandler$e: Exception</ID>
    <ID>TooManyFunctions:BRDFirebaseMessagingService.kt$BRDFirebaseMessagingService : FirebaseMessagingService</ID>
    <ID>TooManyFunctions:BRSharedPrefs.kt$BRSharedPrefs</ID>
    <ID>TooManyFunctions:HomeScreenHandler.kt$HomeScreenHandler : ConnectionCoroutineScopeOnDataChanged</ID>
    <ID>TooManyFunctions:NewPriceAlertViewModel.kt$NewPriceAlertViewModel : ViewModel</ID>
    <ID>TooManyFunctions:OnBoardingHandler.kt$OnBoardingHandler : ConnectionCoroutineScope</ID>
    <ID>TooManyFunctions:PriceAlert.kt$PriceAlert$Companion</ID>
    <ID>TooManyFunctions:PriceAlertRepository.kt$PriceAlertRepositoryImpl : PriceAlertRepository</ID>
    <ID>TooManyFunctions:RecoveryKeyHandler.kt$RecoveryKeyHandler : ConnectionCoroutineScope</ID>
    <ID>TooManyFunctions:RecoveryKeyUpdate.kt$RecoveryKeyUpdate : UpdateRecoveryKeyUpdateSpec</ID>
    <ID>TooManyFunctions:SendSheetHandler.kt$SendSheetHandler</ID>
    <ID>TooManyFunctions:SparkView.kt$SparkView : ViewScrubListener</ID>
    <ID>VariableNaming:PriceAlertListViewModel.kt$PriceAlertListViewModel$private val TAG: String = PriceAlertListViewModel::class.java.simpleName</ID>
    <ID>WildcardImport:Resource.kt$import com.breadwallet.tools.mvvm.Status.*</ID>
    <ID>WildcardImport:WalletUpdate.kt$import com.spotify.mobius.Next.*</ID>
  </Whitelist>
</SmellBaseline>
