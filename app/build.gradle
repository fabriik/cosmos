plugins {
    id("io.gitlab.arturbosch.detekt") version "$detekt_version"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.protobuf'
apply plugin: 'io.sweers.redacted.redacted-plugin'
apply from: file("../gradle/google-services.gradle")
apply from: file("../gradle/copy-font-files.gradle")

redactedPlugin {
    replacementString = '***'
}

detekt {
    toolVersion = "1.0.1"
    input = files("src/main/java", "src/test/java")
}

android {
    compileSdkVersion = 29
    buildToolsVersion = '29.0.3'
    ext {
        brdMarketingVersion = 4   // Major version. Usually affected by marketing. Maximum value: 99
        brdProductVersion = 5    // Minor version. Usually affected by product. Maximum value: 99
        brdEngineeringVersion = 1 // Hot fix version. Usually affected by engineering. Maximum value: 9
        brdBuildVersion = 3       // Build version. Increase for each new build. Maximum value: 999

        // The version code must be monotonically increasing. It is used by Android to maintain upgrade/downgrade
        // relationship between builds with a max value of 2 100 000 000.
        generateVersionCode = { marketing, product, engineering, build ->
            (marketing * 1000000) + (product * 10000) + (engineering * 1000) + build;
        }

        brdVersionCode = generateVersionCode(brdMarketingVersion, brdProductVersion, brdEngineeringVersion, brdBuildVersion)
        brdInternalVersionName = "$brdMarketingVersion.$brdProductVersion.$ext.brdEngineeringVersion.$ext.brdBuildVersion"
    }
    defaultConfig {
        applicationId = 'com.breadwallet'
        minSdkVersion 23
        targetSdkVersion 29

        versionCode brdVersionCode
        versionName "$brdMarketingVersion.$brdProductVersion.$brdEngineeringVersion"
        buildConfigField "int", "BUILD_VERSION", "$brdBuildVersion"

        buildConfigField "String", "BDB_CLIENT_TOKEN", BDB_CLIENT_TOKEN
        buildConfigField "Boolean", "USE_REMOTE_CONFIG", useGoogleServices.toString()

        testInstrumentationRunner = 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }
    signingConfigs {
        FakeSigningConfig {
            keyAlias 'key0'
            keyPassword 'qwerty'
            storeFile rootProject.file('FakeSigningKey')
            storePassword 'qwerty'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
        animationsDisabled = true
        // TODO: execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
    packagingOptions {
        pickFirst 'protobuf.meta'
        exclude("META-INF/*.kotlin_module")
    }
    // Specifies two flavor dimensions.
    flavorDimensions "mode"
    productFlavors {
        brd {
            applicationId = "com.breadwallet"
            dimension "mode"
            resValue "string", "app_name", "BRD"
            buildConfigField "boolean", "BITCOIN_TESTNET", "false"
            // Uncomment to fake sign a mainnet release build for testing.
            missingDimensionStrategy 'network', 'onMainnet'
        }
        brdTestnet {
            applicationId = "com.breadwallet.testnet"
            dimension "mode"
            resValue "string", "app_name", "BRD Testnet"
            buildConfigField "boolean", "BITCOIN_TESTNET", "true"
            missingDimensionStrategy 'network', 'onTestnet'
        }
    }
    lintOptions {
        lintConfig file("lint.xml")
        // set to true to turn off analysis progress reporting by lint
        quiet false

        explainIssues true
        // if true, stop the gradle build if errors are found
        abortOnError true
        // if true, only report errors
        ignoreWarnings false

        checkReleaseBuilds false

        disable 'MissingTranslation'
    }
    buildTypes {
        release {
            signingConfig signingConfigs.FakeSigningConfig
            manifestPlaceholders = [applicationIcon: "@mipmap/ic_launcher"]
            debuggable = false
            minifyEnabled = false
            buildConfigField "boolean", "IS_INTERNAL_BUILD", "false"
            if (useGoogleServices) {
                firebaseAppDistribution {
                    releaseNotes = getChangelog()
                    groups = "android-team"
                }
            }
        }
        debug {
            signingConfig signingConfigs.FakeSigningConfig
            applicationIdSuffix '.debug'
            manifestPlaceholders = [applicationIcon: "@mipmap/ic_launcher_grayscale"]
            debuggable = true
            jniDebuggable = true
            minifyEnabled = false
            buildConfigField "boolean", "IS_INTERNAL_BUILD", "true"
            if (useGoogleServices) {
                firebaseAppDistribution {
                    releaseNotes = getChangelog()
                }
            }
        }

    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java',
                            '${protobuf.generatedFilesBaseDir}/main/javalite']
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${output.baseName}-${brdInternalVersionName}.apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += [
                "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xopt-in=kotlinx.coroutines.FlowPreview",
                "-Xopt-in=kotlin.RequiresOptIn"
        ]
    }
    androidExtensions {
        experimental = true
    }
}

static def getChangelog() {
    def cmdGetCurrentTag = "git describe --tags --abbrev=-0"
    def currentTag = System.getenv("CI_COMMIT_TAG")
    def previousTag = cmdGetCurrentTag.execute().text.trim()

    if (currentTag == null || currentTag == "") {
        currentTag = "HEAD"
    } else if (currentTag == previousTag) {
        def cmdGetPreviousTagRevision = "git rev-list --tags --skip=1 --max-count=1"
        def previousTagRevision = cmdGetPreviousTagRevision.execute().text.trim()
        def cmdGetPreviousTag = "git describe --abbrev=0 --tags $previousTagRevision"
        previousTag = cmdGetPreviousTag.execute().text.trim()
    }

    def cmdLine = "git log $previousTag..$currentTag --no-merges --pretty=format:%s"
    def changelog = cmdLine.execute().text
    return changelog
}

task downloadBundles {
    doLast {
        def bundles = ["brd-web-3", "brd-tokens", "brd-web-3-staging", "brd-tokens-staging"]
        def stagingHost = "stage2.breadwallet.com"
        def releaseHost = "api.breadwallet.com"
        for (String bundleName : bundles) {
            def fileUrl
            def resFolder
            if (bundleName.contains("staging")) {
                fileUrl = "https://${stagingHost}/assets/bundles/${bundleName}/download"
                resFolder = "${projectDir}/src/debug/res/raw/"
            } else {
                fileUrl = "https://${releaseHost}/assets/bundles/${bundleName}/download"
                resFolder = "${projectDir}/src/main/res/raw/"
            }

            def folder = file(resFolder)
            if (!folder.exists()) {
                folder.mkdirs()
            }
            println("Downloading: ${fileUrl} into ${resFolder}")
            new File("${resFolder}${bundleName.replace("-", "_")}.tar").withOutputStream { out ->
                new URL(fileUrl).withInputStream { from -> out << from }
            }
        }
    }
}

protobuf {
    protoc {
        // You still need protoc like in the non-Android case
        artifact = 'com.google.protobuf:protoc:3.11.4'
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { option 'lite' }
            }
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

dependencies {
    implementation project(":app-core")
    implementation "com.breadwallet.core:corecrypto-android:$core_version"

    // AndroidX
    implementation "androidx.lifecycle:lifecycle-extensions:$ax_lifecycle_ext"
    implementation "androidx.work:work-runtime-ktx:$ax_workmanager"
    implementation "androidx.core:core-ktx:$ax_core"
    implementation "androidx.appcompat:appcompat:$ax_appcompat"
    implementation "androidx.cardview:cardview:$ax_cardview"
    implementation "androidx.constraintlayout:constraintlayout:$ax_constraintlayout"
    implementation "androidx.gridlayout:gridlayout:$ax_gridlayout"
    implementation "androidx.recyclerview:recyclerview:$ax_recyclerview"
    implementation "androidx.security:security-crypto:$ax_securitycrypto"
    implementation "androidx.legacy:legacy-support-v13:$ax_legacyV13"
    implementation "androidx.camera:camera-core:$camerax_version"
    implementation "androidx.camera:camera-camera2:$camerax_version"
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    implementation "androidx.camera:camera-view:$camerax_view_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$ax_espresso"
    androidTestImplementation "androidx.test:runner:$ax_test_runner"
    androidTestImplementation "androidx.test:rules:$ax_test_rules"
    androidTestImplementation "androidx.test.ext:junit-ktx:$ax_junit_ext"
    androidTestImplementation "androidx.work:work-testing:$ax_workmanager"
    androidTestUtil "com.android.support.test:orchestrator:$ax_test_orchestrator"

    // Test infrastructure
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
    androidTestImplementation "com.kaspersky.android-components:kaspresso:$kaspresso_version"
    androidTestImplementation "com.agoda.kakao:kakao:$kakao_version"

    // Google/Firebase
    implementation "com.google.android.material:material:$material_components_version"
    implementation("com.google.firebase:firebase-config-ktx:$firebase_config_version") {
        exclude group: "com.google.protobuf", module: "protobuf-lite"
    }
    implementation "com.google.firebase:firebase-analytics:$firebase_analytics"
    implementation "com.google.firebase:firebase-messaging:$firebase_messaging"
    implementation "com.google.guava:guava:$guava_version"
    implementation "com.google.protobuf:protobuf-javalite:$protobuf_version"
    implementation "com.google.zxing:core:$zxing_version"

    // Square
    implementation "com.squareup.picasso:picasso:$picasso_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"

    // Webserver/Platform
    implementation "commons-io:commons-io:$commons_io_version"
    implementation "io.sigpipe:jbsdiff:$jbsdiff_version"
    implementation "org.eclipse.jetty:jetty-continuation:$jetty_version"
    implementation "org.eclipse.jetty:jetty-webapp:$jetty_version"
    implementation "org.eclipse.jetty.websocket:websocket-server:$jetty_version"
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    // Kotlin libraries
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    // Mobius
    implementation "com.spotify.mobius:mobius-core:$mobius_version"
    implementation "com.spotify.mobius:mobius-android:$mobius_version"
    testImplementation "com.spotify.mobius:mobius-test:$mobius_version"

    implementation "drewcarlson.mobius:mobius-coroutines:$mobius_coroutines_version"

    // Fastadapter
    implementation "com.mikepenz:fastadapter:$fastadapter_version"
    implementation "com.mikepenz:fastadapter-extensions-diff:$fastadapter_version"
    implementation "com.mikepenz:fastadapter-extensions-drag:$fastadapter_version"
    implementation "com.mikepenz:fastadapter-extensions-utils:$fastadapter_version"

    // Conductor
    implementation "com.bluelinelabs:conductor:$conductor_version"
    implementation "com.bluelinelabs:conductor-support:$conductor_version"

    // Kodein DI
    implementation "org.kodein.di:kodein-di-erased-jvm:$kodein_version"
    implementation "org.kodein.di:kodein-di-framework-android-x:$kodein_version"

    // Debugging/Monitoring
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
    debugImplementation "com.github.anrwatchdog:anrwatchdog:$anr_watchdog_version"
    implementation "com.google.firebase:firebase-crashlytics:$firebase_crashlytics_version"

    compileOnly "io.sweers.redacted:redacted-compiler-plugin-annotation:$redacted_version"

    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version"
}
